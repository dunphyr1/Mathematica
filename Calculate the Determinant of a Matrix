(*finds determinant recursively, calling the "mySquareMatrixQ" module*)
(*finds the determinant of a matrix using the Leibniz formula*)
(*finds determinant using Laplace's forumula*)(*faster*)



(*recursive*)
mySquareMatrixQ[mat_] :=
  Module[{a,
    part1,
    debug = False
    },
   part1 = Length[mat];
   
   If[debug == True,
    Print["This is the length of the giant list"];
    Print[part1];
    ];(*end debug*)
   
   (*this for loop will test to see there are the same amount of rows \
as there are columns*)
   (*the length of input list is the number of rows, 
   the number of elements in each part of the list are the columns*)
   
   For[a = 1, a <= Length[mat], a++,
    
    (*debug*)
    If [debug == True,
     Print["This is the part the for loop is currently on"];
     Print[Part[mat, a]];
     Print["This is the length of the part"];
     Print[Length[Part[mat, a]]];
     ];(*end debug*)
    
    
    If [ Length[Part[mat, a]] != part1,
     Return[False];
     ];(*end If statement*)
    
    ];(*end for loop*)
   
   Return[True];
   
   ];(*end module*)


(******************************************************************************************************************************)
(*recursive*)
myDet[A_] :=
  Module[{
    a, b, c, d, i, j,
    answer = 0, NewMat,
    ZeroRow, rowlength, rows, rownum,
    ZeroCol, col, colnum, colset,
    B,
    debug = True
    },
   
   If[debug == False,
    Print[MatrixForm[A]];
    ];(*end debug*)
   
   If [ mySquareMatrixQ == False,
    Return[
      "Error: cannot find the determinant of a non-square matrix"];
    ]; (*end if*)
   
   rowlength = Length[A];
   ZeroRow = {};
   rownum = 1;
   (*this for loop will find which row has the most zeros in it*)
   
   
   For[  a = 1, a <= rowlength, a++,
    
    If [debug == False,
     Print[
      "This is the row the loop is working on, and then its the \
number of 0s in that row"];
     Print[Part[A, a]];
     Print[Count[Part[A, a], 0]];
     ]; (*end debug*)
    
    
    If[ Count[Part[A, a], 0] >= Count[ZeroRow, 0],
     ZeroRow = Part[A, a];
     rownum = a;
     
     ]; (*end if*)
    ];(*end for loop*)
   
   If[debug == False,
    Print[
     "This is the row with the most 0's in it, and this is the row \
number"];
    Print[ZeroRow];
    Print[rownum];
    ];(*end debug*)
   
   (*now I will find the total number of zeros in each column*)
   (*I will be using two for loops, one to go through rows, 
   another to state which column to work o in each row*)
   ZeroCol = {};
   colnum = 1;
   
   For[b = 1, b <= rowlength, b++,
    
    If [debug == False,
     Print["This is the column being worked on"];
     Print[b];
     ];(*end debug*)
    
    
    colset = {};
    
    For[c = 1, c <= rowlength, c++,
     
     rows = Part[A, c];
     col = Part[rows, b];
     colset = Append[colset, col];
     
     If [c == rowlength,
      
      If [debug == False,
       Print["This is the column being tested"];
       Print[colset];
       ];(*end debug*)
      
      If[Count[colset, 0] >= Count[ZeroCol, 0],
       ZeroCol = colset;
       colnum = b;
       
       ];(*end inner if*)
      ];(*end outer if*)
     ];(*end inner for*)
    ];(*end out for*)
   
   If [debug == False,
    Print[
     "This is the column with the most 0's in it, and this is the col \
number"];
    Print[ZeroCol];
    Print[colnum];
    ];(*end debug*)
   
   (*I will use this so the program will start at the row or column \
with the most 0's*)
   (*so the program will be more efficient*)
   (***************************************************************)
   
   
   (*base case*)
   If [Length[A] == 1,
    answer = Total[Total[A]];
    
    If [debug == False,
     Print["This is the 1x1 matrix, the next item is Part[A,1]"];
     Print[A];
     Print["this is the answer"];
     Print[answer];
     ];(*end debug*)
    
    Return[answer];
    ];(*end if for base case*)
   
   (************************************************)
   (*begin the recurive steps*)
   (************************************************)
   
   
   (*choosing starting row*)
   If [Count[ZeroCol, 0] > Count[ZeroRow, 0],
    
    For[d = 1, d <= Length[A], d++,
      B = A;
      B = Drop[A, {d}, {colnum}];
      
      (*This is the optimization step, if the Subscript[a, d, 
      colnum] = 0, it skips the recursive step*)
      (*it doesnt need to do the step because the product will end up \
being 0 anyways*)
      If[Total[Total[Part[A, {d}, {colnum}]]] != 0,
       answer = 
         answer + (-1)^(colnum + d)*
           Total[Total[Part[A, {d}, {colnum}]]]*myDet[B];
       ];(*end if*)
      
      
      If[debug == False,
       Print[
        "The matrix has more 0's in a col than row, so this is the \
for loop for it"];
       Print["This is B"];
       Print[MatrixForm[B]];
       Print[Part[A, {d}, {colnum}]];
       ];(*end debug*)
      
      (*colnum is the starting point*)
      ];
    ];(*end if statement for more 0s in a col*)
   
   (*a row in the matrix has the most 0's*)
   If[Count[ZeroCol, 0] <= Count[ZeroRow, 0],
    
    For[i = 1, i <= Length[A], i++,
      B = A;
      B = Drop[A, {rownum}, {i}];
      
      (*This is the optimization step, if the Subscript[a, rownum, 
      i] = 0, it skips the recursive step*)
      (*it doesnt need to do the step because the product will end up \
being 0 anyways*)
      If[Total[Total[Part[A, {rownum}, {i}]]] != 0,
       answer = 
         answer + (-1)^(rownum + i)*
           Total[Total[Part[A, {rownum}, {i}]]]*myDet[B];
       ];(*end if statement*)
      
      If[debug == False,
       Print[
        "The matrix has more 0's in a row than col, so this is the \
for loop for it"];
       Print["This is B"];
       Print[MatrixForm[B]];
       ];(*end debug*)
      
      ];(*end for loop*)
    ];(*end if*)
   
   Return[answer];
   ];(*end module*)




(******************************************************************************************************************************)
(*Leibniz*)
myDet2[A_] := 
  Module[{
    a, b, i, S, Seta,
    WhereIam, HowLongCycleIs, Perm,
    WhereIStarted, InversionCount,
    AccountedFor, Setn, answer,
    debug = False},
   
   If[SquareMatrixQ[A] == False,
    Return["Cannot find the determinant of a non square matrix"];
    ];
   
   answer = 0;
   Setn = {};
   Print[MatrixForm[A]];
   
   (*this creates a set of numbers from 1 to a, 
   where a is the length of the matrix*)
   For[a = 1, a <= Length[A], a++,
    Setn = Append[Setn, a];
    ];(*end for loop*)
   
   If[debug == True,
    Print["This is Setn"];
    Print[Setn];
    ];(*end debug*)
   
   S = Permutations[Setn];
   
   If[debug == True,
    Print[
     "This is \!\(\*SubscriptBox[\(S\), \(n\)]\) where n is the \
length of the matrix"];
    Print[S];
    ];(*end debug*)
   
   For[ i = 1, i <= Length[S], i++,
    
    (*is the permutation being worked on*)
    Perm = Part[S, i];
    AccountedFor = Setn;
    InversionCount = 0;
    WhereIStarted = 1;
    
    If[debug == True,
     Print["This is the permutation being worked on"];
     Print[Perm];
     ];(*end debug*)
    
    (*these while loops will count the amount of inversions a \
permutation does*)
    (****************************************************************)

    
    While[AccountedFor != {},
     
     AccountedFor = DeleteCases[AccountedFor, WhereIStarted];
     WhereIam = Perm[[WhereIStarted]];
     HowLongCycleIs = 1;
     
     If[debug == True,
      Print["This is the accounted for list"];
      Print[AccountedFor];
      Print["WhereIam"];
      Print[WhereIam];
      ];(*end debug*)
     
     While[WhereIam != WhereIStarted,
      HowLongCycleIs = HowLongCycleIs + 1;
      AccountedFor = DeleteCases[AccountedFor, WhereIam];
      WhereIam = Perm[[WhereIam]];
      
      If[debug == True,
       Print["This is how long the cycle is"];
       Print[HowLongCycleIs];
       Print["Where i am"];
       Print[WhereIam];
       Print["perm[[whereiam]]"];
       Print[Perm[[WhereIam]]];
       Print["Accountedfor"];
       Print[AccountedFor];
       ];(*end debug*)
      
      ];(*end inner while loop*)
     
     InversionCount = InversionCount + HowLongCycleIs - 1;
     (*this if statement prevents an error message from popping up \
for when*)
     (*accountedfor is the empty set and is still going through the \
loop*)
     If[AccountedFor != {},
      WhereIStarted = AccountedFor[[1]];
      ];(*end if*)
     
     ];(*end outer while loop*)
    (********************************************************************)
\

    
    If[debug == True,
     Print["This is the inversion count for the current permutation"];
     Print[InversionCount];
     ];(*end if*)
    
    (*this is the step to find out what sgn (sigma) is in the formula*)
\

    (*make a while loop that track all of the times the permutation \
does an inversion*)
    
    Seta = 1;
    
    (*this for loop gets all the a's multiplied together*)
    For[b = 1, b <= Length[Perm], b++,
     Seta = Seta*A[[b, Perm[[b]]]];
     
     If[debug == True,
      Print["This is A[[b,Perm[[b]]]]"];
      Print[A[[b, Perm[[b]]]]];
      ];(*end debug*)
     
     ];(*end for*)
    
    answer = answer + (-1)^InversionCount*Seta;
    
    ];(*end for loop*)
   
   Return[answer];
   ];




(********************************************************************************************************************************)
(*Laplace*)
myDet3[A_] :=
  Module[{answer, a, b, B, c, d, i, j, k, val1, val2, col, colset, 
    counter, det, cProd, debug = True},
   
   If[SquareMatrixQ[A] == False,
    Return["Please input a square matrix"];
    ];(*end if statement*)
   
   Print[MatrixForm[A]];
   B = A;
   
   (*While [ B\[NotEqual] UpperTriangularize[B],*)
   
   For[a = 1, a <= Length[A], a++,
    
    colset = {};
    
    If[A[[a]] == 0*A[[1]],
     Print["There is a zero row, therefore the determinant is zero"];
     Return[0];
     ];(*end if*)
    
    
    For[b = 1, b <= Length[A], b++,
     
     col = A[[b, a]];
     colset = Append[colset, col];
     
     If[Length[colset] == Length[A],
      
      If[colset == 0*A[[1]],
        Print[
         "There is a zero column, therefore the determinant is 0"];
        Return[0];
         ];(*end inner if*)
      
      ];(*end outer if*)
     
     If [ a != b,
      
      If [debug == False,
       Print["This first is part a of A and part b of B"];
       Print[A[[a]]];
       Print[A[[b]]];
       ];(*end debug*)
      
      If [A[[a]] == A[[b]],
       Print[
        "There is two of the same row in the matrix, so the \
determinant is 0"];
       Return[0];
       ];(*end inner if*)
      ];(*end outer if*)
     ];(*end inner for*)
    ];(*end outer for*)
   
   (*all of this will evaluate the matrix and see if there are \
obvious signs that the*)
   (*determinant will be 0*)
   (*the following code will reduce the matrix into echelon form and \
figure out the determinant of the matrix*)
   
   (*This portion makes sure there is a number in the diagonal that \
is not equal to 0*)
   (*this portion is about the type 1 elementary matrix*)
   counter = 0;
   For[c = 1, c <= Length[A], c++,
    
    If[B[[c, c]] == 0,
      
      For[d = c, d <= Length[A], d++,
        
        If[B[[c, d]] != 0,
          
          (*this is the code where it swaps the rows in a matrix*)
          B[[{c, d}]] = B[[{d, c}]];
          counter = counter + 1;
          
          If [debug == True,
           
           
           Print["There was a row swap, the new matrix is below and \
under that is the counter"];
           Print[MatrixForm[B]];
           Print[counter];
           
           ];
          
          ];(*end inner if*)
        ];(*end inner for*)
      ];(*end outer if*)
    ];(*end outer for*)
   
   
   If[debug == False,
    Print["This is how many row swaps the program performed"];
    Print[counter];
    Print["This is the current matrix being worked on"];
    Print[MatrixForm[B]];
    ];(*end debug*)
   
   (*this is the start of elementary matrix II*)
   (*This looks to see if there are numerical values other than 0 \
underneath a *)
   (*given point in the diagonal*)
   cProd = 1;
   
   For[j = 1, j <= Length[A], j++,
    For[k = 1, k <= Length[A], k++,
      
      If[j < k,
        
        If[B[[k, j]] != 0,
          val1 = B[[k, j]];
          val2 = B[[j, j]];
          cProd = cProd*val1/val2;
          B[[k]] = B[[k]] - val1/val2*B[[j]];
          
          
          ];(*end inner if*)
        ]; (*end  outer if*)
      ]; (*end inner for*)
    ]; (*end outer for*)
   
   (*this small for loop multiplies all the diagonal entries together*)

   
   det = 1;
   For[i = 1, i <= Length[A], i++,
    det = det*B[[i, i]];
    
    ];(*end for loop*)
   
   answer = (det*(-1)^counter)/cProd;
   Return[det];
   
   ];(*end module*)
