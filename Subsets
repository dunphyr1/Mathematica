(*Calculates the power set of a given set recursively and iteratively*)




MyRecursiveSubsets[AA_] :=
  Module[{
    (*Listing all variables*)
    BB,
    CC,
    DD,
    Yes,
    Counter,
    
    DebugFlag = False  (*Going to make a debug program*)
    		},
   (*CC={AA};*)
   
   If [DebugFlag == True,
    Print["Entered MyRecursiveSubsets with the set "];
    Print[AA];
    ];
   (******************************************************)
   (*Above is a Debug program so the user can see all the processs \
the computer makes*)
   (******************************************************)
   If[Length[AA] == 0, Return[{{}}]];
   
   If[Length[AA] > 0,
    
    	Yes = Part[AA, Length[AA]];
    
    (*Assigning the Variable that is going to be dropped to a \
variable*)
    (*Begin part "Yes" Debug*)
    If [DebugFlag == True,
     Print["The element removed from the set is "];
     Print[Yes];
     ];
    (*End part "Yes" debug*)
    
    	BB = Drop[AA, {Length[AA]}];
    
    (*Assigning a variable for the original set without its last \
element*)
    (*Begin part "BB" debug*)
    If [DebugFlag == True,
     Print["The new set is now "];
     Print[BB];
     ];
    (*End part "BB" debug*)
    
    	(*Drop[AA,{Length[AA]}];*)
    
    (*Dropping last element of original set*)
    
    	CC = MyRecursiveSubsets[BB];
    
    (*Recursive Statement*)
    (*Begin debug for "CC"*)
    If [DebugFlag == True,
     Print["CC is now "];
     Print[CC];
     ];
    (*End debug for "CC"*)
    Counter = 1;
    DD = {};
    (*Begin While loop*)
    While [Counter <= Length[CC],
     DD = Append[DD, Append[Part[CC, Counter], Yes]];
     Counter = Counter + 1;
     	];
    (*End While loop*)
    
    (*This Appends the dropped element of original set to the \
powerset of BB*)
    	If [DebugFlag == True,
     	Print["DD is now "];
     	Print[DD];
     ];
    (*End debug for "DD"*)
    ]; 
   (********************************************)
   (*End Recursive statement *)
   (********************************************)
   Return[Union[CC, DD]]
   ];
(*End module*)





MyIterativeSubsets[InList_] :=
  Module[ {
    Position,
    MyPowerSet,
    Pointer,
    ListLength,
    i,
    NewSet,
    DebugFlag = False
    (*note I will put (*************) on top of any chunk of code \
dedicated to debug*)
    },
   (*Listing all the variables*)
   
   (*Assigning Listlength to a value and setting MyPowerSet to the \
empty set*)
   ListLength = Length[InList];
   MyPowerSet = {{}};
   Position = 1;
   
   (*********************************************************)
   If [DebugFlag == True,
    Print["Entered MyIterativeSubsets with the set"];
    Print[InList];
    ];
   (*Establishing While loop for Powersets*)
   While [ Position <= ListLength ,
    
    (********************************************************)
    If [DebugFlag == True,
     Print["The While loop currently prints this out as the Powerset"];
     Print[MyPowerSet]
     ];
    
    (*Assign elements in given list to a variable that will change \
after each time the loop is used*)
    Pointer = Part[InList, Position];
    
    (********************************************************)
    If [DebugFlag == True,
     Print[
      "The While loop currently prints this out as the element \
pointed to"];
     Print[Pointer]
     ];
    
    (*Wrote this so it reassigns NewSet each loop*)
    NewSet = MyPowerSet;
    
    (***********************************************************)
    If [DebugFlag == True,
     Print["The While loop currently prints this out as the NewSet"];
     Print[NewSet];
     ];
    
    (*This while loop will add the element chosen into each part of \
Newsets list*)
    i = 1;
    While[i <=  Length[NewSet],
     Part[NewSet, i] = Append[Part[NewSet, i], Pointer];
     i = i + 1;
     ];
    
    (*Combines Powerset and newset to create the actual powerset*)
    MyPowerSet = Union[MyPowerSet, NewSet];
    
    
    Position = Position + 1;
    
    (********************************************************)
    If [DebugFlag == True,
     Print[
      "The While loop currently prints this out as current position \
value"];
     Print[Position]
     ];
    (*End While Loop*)
    ];
   
   Return[Sort[MyPowerSet]];
   ];
